

AWSTemplateFormatVersion: '2010-09-09'
Description: Create Ec2 Machine 

Parameters:
  MyVpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR 

  Subnet1Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for Subnet 1 within the VPC.      
      
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.nano

  MyAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: ap-south-1a
   

  ImageId:
    Type: String
    Default: ami-01a4f99c4ac11b03c
    Description: The Amazon Linux AMI to use.

Resources:
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPair

  
      

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref NewKeyPair
      SecurityGroupIds: 
        - !Ref MySecurityGroup
        
      AvailabilityZone: !Ref MyAvailabilityZone
      SubnetId: !Ref Subnet1
      VpcId: !Ref MYVPC

      Tags:
        - Key: Name
          Name: DemoEc2-Instance



  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      
      GroupDescription: My SG with port 22 and 8080 inbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'          
          ToPort: '8080'
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: EC2-SG
      VpcId: !Ref MYVPC


  MYVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVpcBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Test-Vpc
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MYVPC
      CidrBlock: !Ref Subnet1Block 
      Tags:
        - Key: Name
          Value: !Sub Test-Subnet
      AvailabilityZone: 
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region

    
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MYVPC               
      Tags: 
        - Key: Name
          Value: Public Subnets
         

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MYVPC   

  Route: 
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable  
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 

 

  

      

    
    
Outputs:
   MyEC2Instance:
     Description: My instance id
     Value: !Ref MyEC2Instance
   MyDNSName:
     Description: My Public DNS Name
     Value: !GetAtt MyEC2Instance.PublicDnsName
   MyInstanceAvailabilityZone:
     Description: Instance Availability Zone
     Value: !GetAtt MyEC2Instance.AvailabilityZone  

   VpcId:
     Description: Vpc Id
     Value: !Ref MYVPC 

   Subnet1Id:
     Description: Subnet 1 Id
     Value: !Ref Subnet1