
    
     

AWSTemplateFormatVersion: '2010-09-09'
Description: Create EC2 Instance

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName


  MyVpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR 

  Subnet1Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for Subnet 1 within the VPC.


  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.nano

  ImageId:
    Type: String
    Default: ami-01a4f99c4ac11b03c
  
  MyAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: ap-south-1a
    AllowedValues:
      - ap-south-1a
      - ap-south-1b
      - ap-south-1c

Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVpcBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Test-Vpc

  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref MySecurityGroup
      AvailabilityZone: !Ref MyAvailabilityZone
      SubnetId: !Ref Subnet1
      VpcId: !Ref MyVpc

      Tags:
        - Key: Name
          Value: Demoec2

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My SG with port 22, and 8080 inbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'          
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2-SG
      VpcId: !Ref MyVpc


  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref Subnet1Block 
      Tags:
        - Key: Name
          Value: !Sub Test-Subnet
      AvailabilityZone: 
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region

    
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc               
      Tags: 
        - Key: Name
          Value: Public Subnets
         

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVpc

  Route: 
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable  
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 

 
